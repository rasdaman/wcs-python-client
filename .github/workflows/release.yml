name: Build and Publish to PyPI

# The workflow is triggered when events that include tags 
# starting with v*.*.* are pushed to the repository.
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # Builds the pythond distribution (wheel and source tarball)
  build:
    name: Build distribution
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        
    - name: Install pypa/build tool
      run: >-
        python3 -m
        pip install
        build
        --user
        
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
      
    - name: Store the distribution packages  # Temporarily store the build artifacts in the dist directory under the name python-package-distributions
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  # Publishes the built package to PyPI (production) if the tag starts with v.*
  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
      - build  # Start the job only if the build job has completed
    runs-on: ubuntu-latest
    environment:
      name: pypi  # environment name set in the PyPI Publisher
      url: https://pypi.org/p/wcs # Project URL
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
    - publish-to-pypi # Start the job only if the PyPI publishing job has completed
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Find the previous release tag
      id: previous_release_tag
      run: |
        LAST_TAG=$(git describe --tags --match 'v[0-9]*.[0-9]*.[0-9]*' --abbrev=0)
        if [ -n "$LAST_TAG" ]; then
          PREV_TAG=$(git describe --tags --match 'v[0-9]*.[0-9]*.[0-9]*' --abbrev=0 "$LAST_TAG^")
        else
          PREV_TAG=""
        fi
        echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

    - name: Generate release summary
      id: release_summary
      run: |
        if [ -z "$PREV_TAG" ]; then
          echo "No previous release tag found. Starting from the beginning."
          SUMMARY=$(git log --pretty=format:"%B" --no-merges | grep -v '^$' | sed '/^-/!s/^/- /')
        else
          SUMMARY=$(git log --pretty=format:"%B" --no-merges "$PREV_TAG..HEAD^" | grep -v '^$' | sed '/^-/!s/^/- /')
        fi
        echo "RELEASE_SUMMARY=$SUMMARY" >> $GITHUB_ENV

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        "$GITHUB_REF_NAME"
        --repo "$GITHUB_REPOSITORY"
        --notes "$RELEASE_SUMMARY"
        
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        "$GITHUB_REF_NAME" dist/**
        --repo "$GITHUB_REPOSITORY"
